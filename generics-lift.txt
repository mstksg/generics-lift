-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GHC Generics for deriving numeric typeclasses, Monoid, and other similar classes.
--   
--   GHC Generics for deriving numeric typeclasses, Monoid, and other
--   similar classes.
@package generics-lift
@version 0.1.0.0

module GHC.Generics.Lift
class GLift c f
glift0 :: GLift c f => (forall a. c a => a) -> f p
glift1 :: GLift c f => (forall a. c a => a -> a) -> f p -> f p
glift2 :: GLift c f => (forall a. c a => a -> a -> a) -> f p -> f p -> f p
glift3 :: GLift c f => (forall a. c a => a -> a -> a -> a) -> f p -> f p -> f p -> f p
genericLift0 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b) -> a
genericLift1 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b -> b) -> a -> a
genericLift2 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b -> b -> b) -> a -> a -> a
genericLift3 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b -> b -> b -> b) -> a -> a -> a -> a
instance GHC.Generics.Lift.GLift c f => GHC.Generics.Lift.GLift c (GHC.Generics.M1 i d f)
instance (GHC.Generics.Lift.GLift c f, GHC.Generics.Lift.GLift c g) => GHC.Generics.Lift.GLift c (f GHC.Generics.:*: g)
instance c a => GHC.Generics.Lift.GLift c (GHC.Generics.K1 i a)
instance GHC.Generics.Lift.GLift c GHC.Generics.U1

module GHC.Generics.Numeric
genericPlus :: forall a. (Generic a, GLift Num (Rep a)) => a -> a -> a
genericMinus :: forall a. (Generic a, GLift Num (Rep a)) => a -> a -> a
genericTimes :: forall a. (Generic a, GLift Num (Rep a)) => a -> a -> a
genericNegate :: forall a. (Generic a, GLift Num (Rep a)) => a -> a
genericAbs :: forall a. (Generic a, GLift Num (Rep a)) => a -> a
genericSignum :: forall a. (Generic a, GLift Num (Rep a)) => a -> a
genericFromInteger :: forall a. (Generic a, GLift Num (Rep a)) => Integer -> a
genericDivide :: forall a. (Generic a, GLift Fractional (Rep a)) => a -> a -> a
genericRecip :: forall a. (Generic a, GLift Fractional (Rep a)) => a -> a
genericFromRational :: forall a. (Generic a, GLift Fractional (Rep a)) => Rational -> a
genericPi :: forall a. (Generic a, GLift Floating (Rep a)) => a
genericExp :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericLog :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericSqrt :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericPower :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a -> a
genericLogBase :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a -> a
genericSin :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericCos :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericTan :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAsin :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAcos :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAtan :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericSinh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericCosh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericTanh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAsinh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAcosh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAtanh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a

module Data.Monoid.Generic
genericSemigroup :: forall a. (Generic a, GLift Semigroup (Rep a)) => a -> a -> a
genericMappend :: forall a. (Generic a, GLift Monoid (Rep a)) => a -> a -> a
genericMempty :: forall a. (Generic a, GLift Monoid (Rep a)) => a
