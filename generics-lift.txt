-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | GHC Generics for deriving numeric typeclasses, Monoid, and other similar classes.
--   
--   See README.md (or read online at
--   <a>https://github.com/mstksg/generics-lift#readme</a>)
@package generics-lift
@version 0.1.0.0


-- | Lift polymorphic typeclass over product types using Generics.
--   
--   This module has two main purposes:
--   
--   <ol>
--   <li>Write methods to lift methods of typeclasses to product types</li>
--   <li>Write default/automatic instances for your typeclasses so users
--   can auto-derive them</li>
--   </ol>
--   
--   These functions can be used to lift polymorphic functions on any type
--   (deriving <a>Generic</a>) that has a single constructor, where every
--   field is an instance of the class constraint of the function being
--   lifted.
--   
--   See README for details on usage instructions and motivations.
module GHC.Generics.Lift
class GLift c f
glift0 :: GLift c f => (forall a. c a => a) -> f p
glift1 :: GLift c f => (forall a. c a => a -> a) -> f p -> f p
glift2 :: GLift c f => (forall a. c a => a -> a -> a) -> f p -> f p -> f p
glift3 :: GLift c f => (forall a. c a => a -> a -> a -> a) -> f p -> f p -> f p -> f p
genericLift0 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b) -> a
genericLift1 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b -> b) -> a -> a
genericLift2 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b -> b -> b) -> a -> a -> a
genericLift3 :: forall a c. (Generic a, GLift c (Rep a)) => (forall b. c b => b -> b -> b -> b) -> a -> a -> a -> a
instance GHC.Generics.Lift.GLift c f => GHC.Generics.Lift.GLift c (GHC.Generics.M1 i d f)
instance (GHC.Generics.Lift.GLift c f, GHC.Generics.Lift.GLift c g) => GHC.Generics.Lift.GLift c (f GHC.Generics.:*: g)
instance c a => GHC.Generics.Lift.GLift c (GHC.Generics.K1 i a)
instance GHC.Generics.Lift.GLift c GHC.Generics.U1


-- | Derived methods for Semigroup and Monoid.
--   
--   Can be used for any types (deriving <a>Generic</a>) made with a single
--   constructor, where every field is an instance of <a>Semigroup</a> (or
--   <a>Monoid</a>, depending on the function).
--   
--   Also includes a newtype wrapper that imbues any such data type with
--   instant <a>Semigroup</a> and <a>Monoid</a> instances.
--   
--   See README for details on usage instructions and motivations.
module Data.Monoid.Generics

-- | If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Semigroup</a>, then <tt><a>GMonoid</a> a</tt>
--   has a <a>Semigroup</a> instance.
--   
--   If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Monoid</a>, then <tt><a>GMonoid</a> a</tt> has
--   a <a>Monoid</a> instance.
newtype GMonoid a
GMonoid :: a -> GMonoid a
[getGMonoid] :: GMonoid a -> a
genericSemigroup :: forall a. (Generic a, GLift Semigroup (Rep a)) => a -> a -> a
genericMappend :: forall a. (Generic a, GLift Monoid (Rep a)) => a -> a -> a
genericMempty :: forall a. (Generic a, GLift Monoid (Rep a)) => a
instance Data.Traversable.Traversable Data.Monoid.Generics.GMonoid
instance Data.Foldable.Foldable Data.Monoid.Generics.GMonoid
instance GHC.Base.Functor Data.Monoid.Generics.GMonoid
instance GHC.Generics.Generic (Data.Monoid.Generics.GMonoid a)
instance Data.Data.Data a => Data.Data.Data (Data.Monoid.Generics.GMonoid a)
instance GHC.Read.Read a => GHC.Read.Read (Data.Monoid.Generics.GMonoid a)
instance GHC.Show.Show a => GHC.Show.Show (Data.Monoid.Generics.GMonoid a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.Monoid.Generics.GMonoid a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.Monoid.Generics.GMonoid a)
instance GHC.Generics.Lift.GLift Data.Semigroup.Semigroup (GHC.Generics.Rep (Data.Monoid.Generics.GMonoid a)) => Data.Semigroup.Semigroup (Data.Monoid.Generics.GMonoid a)
instance (GHC.Generics.Lift.GLift Data.Semigroup.Semigroup (GHC.Generics.Rep (Data.Monoid.Generics.GMonoid a)), GHC.Generics.Lift.GLift GHC.Base.Monoid (GHC.Generics.Rep (Data.Monoid.Generics.GMonoid a))) => GHC.Base.Monoid (Data.Monoid.Generics.GMonoid a)


-- | Derived methods for numeric typeclasses.
--   
--   Can be used for any types (deriving <a>Generic</a>) made with a single
--   constructor, where every field is an instance of <a>Num</a> (or
--   <a>Fractional</a> or <a>Floating</a>, depending on the function).
--   
--   Also includes a newtype wrapper that imbues any such data type with an
--   instant <a>Num</a> (and <a>Fractional</a> and <a>Floating</a>)
--   instance.
--   
--   See README for details on usage instructions and motivations.
module Numeric.Generics

-- | If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Num</a>, then <tt><a>GNum</a> a</tt> has a
--   <a>Num</a> instance.
--   
--   If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Fractional</a>, then <tt><a>GNum</a> a</tt>
--   has a <a>Fractional</a> instance.
--   
--   If <tt>a</tt> is a data type with a single constructor whose fields
--   are all instances of <a>Floating</a>, then <tt><a>GNum</a> a</tt> has
--   a <a>Floating</a> instance.
newtype GNum a
GNum :: a -> GNum a
[getGNum] :: GNum a -> a
genericPlus :: forall a. (Generic a, GLift Num (Rep a)) => a -> a -> a
genericMinus :: forall a. (Generic a, GLift Num (Rep a)) => a -> a -> a
genericTimes :: forall a. (Generic a, GLift Num (Rep a)) => a -> a -> a
genericNegate :: forall a. (Generic a, GLift Num (Rep a)) => a -> a
genericAbs :: forall a. (Generic a, GLift Num (Rep a)) => a -> a
genericSignum :: forall a. (Generic a, GLift Num (Rep a)) => a -> a
genericFromInteger :: forall a. (Generic a, GLift Num (Rep a)) => Integer -> a
genericDivide :: forall a. (Generic a, GLift Fractional (Rep a)) => a -> a -> a
genericRecip :: forall a. (Generic a, GLift Fractional (Rep a)) => a -> a
genericFromRational :: forall a. (Generic a, GLift Fractional (Rep a)) => Rational -> a
genericPi :: forall a. (Generic a, GLift Floating (Rep a)) => a
genericExp :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericLog :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericSqrt :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericPower :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a -> a
genericLogBase :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a -> a
genericSin :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericCos :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericTan :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAsin :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAcos :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAtan :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericSinh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericCosh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericTanh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAsinh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAcosh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
genericAtanh :: forall a. (Generic a, GLift Floating (Rep a)) => a -> a
instance Data.Traversable.Traversable Numeric.Generics.GNum
instance Data.Foldable.Foldable Numeric.Generics.GNum
instance GHC.Base.Functor Numeric.Generics.GNum
instance GHC.Generics.Generic (Numeric.Generics.GNum a)
instance Data.Data.Data a => Data.Data.Data (Numeric.Generics.GNum a)
instance GHC.Read.Read a => GHC.Read.Read (Numeric.Generics.GNum a)
instance GHC.Show.Show a => GHC.Show.Show (Numeric.Generics.GNum a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Numeric.Generics.GNum a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Numeric.Generics.GNum a)
instance GHC.Generics.Lift.GLift GHC.Num.Num (GHC.Generics.Rep (Numeric.Generics.GNum a)) => GHC.Num.Num (Numeric.Generics.GNum a)
instance (GHC.Generics.Lift.GLift GHC.Num.Num (GHC.Generics.Rep (Numeric.Generics.GNum a)), GHC.Generics.Lift.GLift GHC.Real.Fractional (GHC.Generics.Rep (Numeric.Generics.GNum a))) => GHC.Real.Fractional (Numeric.Generics.GNum a)
instance (GHC.Generics.Lift.GLift GHC.Num.Num (GHC.Generics.Rep (Numeric.Generics.GNum a)), GHC.Generics.Lift.GLift GHC.Real.Fractional (GHC.Generics.Rep (Numeric.Generics.GNum a)), GHC.Generics.Lift.GLift GHC.Float.Floating (GHC.Generics.Rep (Numeric.Generics.GNum a))) => GHC.Float.Floating (Numeric.Generics.GNum a)
